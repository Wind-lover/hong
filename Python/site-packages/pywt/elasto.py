#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set up ElastoDyn script
#
# Authors: Hao BAI (hao.bai@insa-rouen.fr)
# Date: 29/11/2018
#
# Comments:
#     - 0.0: Initial version
# Description:
# 
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!------------------------------------------------------------------------------
#!                                       MODULES
#!------------------------------------------------------------------------------
#*============================= Modules Personnels =============================
from tools import utils
#* ============================= Modules Communs ==============================
# import re
import collections, numpy, pickle, csv
from pathlib import Path


#!------------------------------------------------------------------------------
#!                                   CLASS DEFINITION
#!------------------------------------------------------------------------------
class InitialCondition(object):
    def __init__(self, speedRange):
        self._speedRange = speedRange
        self._outputPath=Path('~/Eolien/Parameters/NREL_5MW_Onshore/Output/DLC0.1').expanduser()
        self._initCondFolder = Path("~/Eolien/Parameters/NREL_5MW_Onshore/WT/InitCond").expanduser()
        self._initCondTemplate = self._initCondFolder.joinpath("ElastoDyn_*.dat").read_text()
        self._conditionKeys = ("TipDxc1, TipDyc1, PtchPMzc1, PtchPMzc2, PtchPMzc3, Azimuth, RotSpeed, NacYaw, YawBrTDxt, YawBrTDyt")
        self._conditionValues = collections.namedtuple("InitialCondition", "TipDxc1, TipDyc1, PtchPMzc1, PtchPMzc2, PtchPMzc3, Azimuth, RotSpeed, NacYaw, YawBrTDxt, YawBrTDyt")
        self._allConditions = collections.OrderedDict()

    def find_initial_condition():
        for v in self._speedRange:
            filename = self._outputPath.joinpath("CST_{}.out".format(v))
            data = utils.read_by_pandas_readcsv(filename)
            temp = []
            for key in self._conditionKeys:
                temp.append(data.get(key)["Records"][-1])
            
            self._allConditions[v] = self._conditionValues._make(temp)
        print(self._allConditions)        
        # save to CSV file
        # with open('new_InitialCondition', 'wt') as f:
        #     datawriter = csv.DictWriter(f, delimiter='\t', fieldnames=d1._fields)
        #     datawriter.writeheader()
        #     for cond in allConditions:
        #         row = cond._asdict()
        #         datawriter.writerow(row)



#!------------------------------------------------------------------------------
#!                                 FUNCTION DEFINITION
#!------------------------------------------------------------------------------



#!------------------------------------------------------------------------------
#!                                    MAIN FUNCTION
#!------------------------------------------------------------------------------
@utils.timer
def main():
    toTest = 1

    if toTest == 1:
        test = InitialCondition()
        test.find_initial_condition()
        pass



#!------------------------------------------------------------------------------
#!                                     RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
        main()
