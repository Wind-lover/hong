#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Creat turbulence wind profile
#
# Authors: Hao BAI (hao.bai@insa-rouen.fr)
# Version: 0.0
# Date: 22/10/2018
#
# Comments:
#     - 0.0: generate .bts wind file by using TurbSim (retrieve ancient batch.py)
#     - 0.1: enable multiprocessing
#
# Description:
# 
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#-----------------------------------------------------------------------------------------
#                                        MODULES
#-----------------------------------------------------------------------------------------
#============================== Modules Personnels ==============================
from tools import utils
#============================== Modules Communs ==============================
import re
import json
import platform
import subprocess # call a bash command e.g. 'ls'
import multiprocessing # enable multiprocessing


#-----------------------------------------------------------------------------------------
#                                    CLASS DEFINITION
#-----------------------------------------------------------------------------------------
class Turbulence(object):
    """docstring for TurbSim"""
    def __init__(self, seed, echo):
        self.seed = seed
        self.echo = echo
        # Get OS platform name
        self._system = {'Linux':'TurbSim_glin64', 'Darwin':'TurbSim_gdar64'}
        self._turbsimName = self._system.get(platform.system())
        # input filename
        self.filename = '{}_{}mps.inp'.format(self.seed[0], self.seed[1])

    def run(self):
        print("|- Generating {} wind at {} m/s with seed ID {} ...".format(self.seed[0],
                                                              self.seed[1], self.seed[2]))
        self._make_copy()
        self._turbsim()
    
    def _make_copy(self):
        # origine .inp file --------------------------------------------------------------
        with open(self.filename, 'r') as f:
            data = f.readlines()
            for index, line in enumerate(data):
                if 'RandSeed1' in line:
                    data[index] = self._replace(line, 'RandSeed1', self.seed[2])
        # creat new .inp file ------------------------------------------------------------
        self.filename = '{}_{}mps_{}.inp'.format(self.seed[0], self.seed[1], self.seed[2])
        with open(self.filename, 'w') as f:
            f.writelines(data)

    def _replace(self, string, keyword, value):
        position = string.find(keyword)
        substring = string[:position]
        # replace float number (e.g. 12.34; 12.; .34)
        newtime = re.sub('[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)', str(value), substring)
        newline = newtime + string[position:]
        return newline

    def _turbsim(self):
        command = '~/Eolien/FAST/{0} {1}'.format(self._turbsimName, self.filename)

        if self.echo:
            # print("|- Running TurbSim ...")
            subprocess.call([command], shell=True)
        else:
            # print("|- Running TurbSim in silence mode ...")
            subprocess.check_output([command], shell=True)



#-----------------------------------------------------------------------------------------
#                                  FUNCTION DEFINITION
#-----------------------------------------------------------------------------------------
def get_turbulence(seed, echo=True):
    temp = Turbulence(seed=seed, echo=echo)
    temp.run()

def get_turbulence_multiprocess(seeds, echo=False):
    pool = multiprocessing.Pool()
    [pool.apply_async(get_turbulence, args=(seed, echo),
     error_callback=utils.handle_error) for seed in seeds]
    pool.close()
    pool.join()



#-----------------------------------------------------------------------------------------
#                                     MAIN FUNCTION
#-----------------------------------------------------------------------------------------
@utils.timer
def main():
    # Load seeds
    with utils.cd('~/Eolien/Parameters/NREL_5MW_Onshore/Wind'):
        with open('6seeds.json', 'r') as f:
            seeds = json.loads(f.read())
    liste = [s for s in seeds if s[0] == "NTM"]
    seeds = liste

    # get_turbulence(seeds[0])
    get_turbulence_multiprocess(seeds[:2])



#-----------------------------------------------------------------------------------------
#                                      RUNNING TEST
#-----------------------------------------------------------------------------------------
if __name__ == '__main__':
        main()
