#!/usr/bin/env python
# -*- coding: utf-8 -*-

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Some common useful functions
#
#
# Authors: Hao BAI
# Date: 17/10/2018
#
# Version:
#   - 0.0: Initial version
#   
# Comments:
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!----------------------------------------------------------------------------------------
#!                                          MODULES PRÉREQUIS
#!----------------------------------------------------------------------------------------
#*============================== Modules Personnels ==============================

#*============================== Modules Communs ==============================
# import csv, copy
import os
# import numpy, json
import pandas, time, collections
# from scipy import signal
from contextlib import contextmanager
import numpy as np
# import multiprocessing



#!----------------------------------------------------------------------------------------
#!                                         CLASS
#!----------------------------------------------------------------------------------------
class Input(object):
    ''' Save data reading from files
        Attributes:
            data: a dictionary of all data labeled by channel name in FAST [ordered dict]
        Methods:
            get(): get values by channel name or channel number
    '''
    def __init__(self):
        self.data = collections.OrderedDict()
    
    def get(self, index):
        if isinstance(index, str):
            return self.data[index] # get by channel name in FAST output file
        elif isinstance(index, int):
            return list(self.data.values())[index-1] # get by channel number
        else:
            raise TypeError("[Error] index type is not allowable, should be str or int")



#!----------------------------------------------------------------------------------------
#!                                      FUNCTIONS
#!----------------------------------------------------------------------------------------
@contextmanager
def cd(newdir):
    prevdir = os.getcwd() # save current working path
    os.chdir(os.path.expanduser(newdir)) # change directory
    try:
        yield
    finally:
        os.chdir(prevdir) # revert to the origin workinng path

def frange(start, stop=None, step=None, precision=None):
    ''' Return a list of float numbers
        Syntax:
            range(stop)
            range(start, stop[, step][, precision])
    '''
    # check how many inputs
    if stop is None and step is None and precision is None:
        return frange(0.0, start)
    # set default step
    if step is None:
        temp = str(stop).lstrip('1234567890')
        if temp == '':
            step = 1.0
        else:
            step = 10**(-(len(temp)-1))
    # set default precision
    if precision is None:
        fois = 1e7
    else:
        fois = 10**precision
    # amplify float number to int number
    new_start = int(start * fois)
    new_stop = int(stop * fois)
    new_step = int(step * fois)
    r = range(new_start, new_stop, new_step)
    # convert int number to float number
    l = [i/fois for i in r]
    return l

def readcsv(filename, delimiter='\t', header=7, datarow=9, echo=True):
    ''' Read a csv-like file into ordered dictionary
        Syntax:
            readcsv(filename[, delimiter[, header[, datarow[, echo]]]])
        Input:
            filename: name of file to be opened [string]
            delimiter: seperator [string]
            header: line number that contains column's name [int]
            datarow: line number that contains the first row of data [int]
            echo: True/False to print elapsed time on screen [boolean]
    '''
    TIK = time.time()
    result = Input()
    header = header - 1
    datarow = datarow - 1
    # read file by using padas
    dataframe = pandas.read_csv(filename, delimiter=delimiter, encoding='ISO-8859-1',
                                header=header, skip_blank_lines=False)
    # don't use set low_memory=False, dtype=str => will be slower
    # skip rows between header and datarow
    if datarow-header >= 2:
        endIndex = (datarow-header)-1
        dataframe.drop(list(range(endIndex)), inplace=True)
    # read data column by column
    for i in range(dataframe.columns.size):
        name = dataframe.columns[i] # get the column head
        records = dataframe.iloc[:,i].values.astype('float') # get values in float
        result.data[name.strip()] = {'Title':name, 'Records':list(records)}
    TOK = time.time()
    if echo: print("|-", filename, "loaded in", "%.2f"%(TOK-TIK), "s")
    return result

def readfwf(filename, widths=(11,11), header=12, datarow=14, echo=True):
    ''' Read a fixed-width formatted file into ordered dictionary
        Syntax:
            readfwf(filename[, widths[, header[, datarow[, echo]]]])
        Input:
            filename: name of file to be opened [string]
            widths: list of field widths [list of int]
            header: line number that contains column's name [int]
            datarow: line number that contains the first row of data [int]
            echo: True/False to print elapsed time on screen [boolean]
    '''
    TIK = time.time()
    result = Input()
    header = header - 1
    datarow = datarow - 1
    dataframe = pandas.read_fwf(filename, widths=widths, header=header)
    # skip rows between header and datarow
    if datarow-header >= 2:
        endIndex = (datarow-header)-1
        dataframe.drop(list(range(endIndex)), inplace=True)
    # read data column by column
    for i in range(dataframe.columns.size):
        name = dataframe.columns[i] # get the column head
        records = dataframe.iloc[:,i].values.astype('float') # get values in float
        result.data[name.strip()] = {'Title':name, 'Records':list(records)}
    TOK = time.time()
    if echo: print("|-", filename, "loaded in", "%.2f"%(TOK-TIK), "s")
    return result



#!----------------------------------------------------------------------------------------
#!                                     MAIN FUNCTION
#!----------------------------------------------------------------------------------------
def main():
    # print("frange(3) =", frange(3))
    # print("frange(3,5) =", frange(3,5))
    # print("frange(3,4.02) =", frange(3,4.02))
    # print("frange(5,9,2) =", frange(5,9,2))
    # print("frange(5,7,0.5) =", frange(5,7,0.5))
    # print("-----")

    # test = readcsv('csv.out')
    # print(test.get(2))
    # print(test.get('Wind1VelX'))
    # test = readfwf('fwf.ext')
    # print(test.get(1))
    # print(test.get('Time'))
    # test.get(1.0) # raise error
    # print("-----")
    pass


#!----------------------------------------------------------------------------------------
#!                                         EXÉCUTION
#!----------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
