#!/usr/bin/env python
# -*- coding: utf-8 -*-

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Some operations on servers
#
#
# Authors: Hao BAI
# Date: 02/11/2018
#
# Version:
#   - 0.0: Initial version
#   
# Comments:
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!----------------------------------------------------------------------------------------
#!                                          MODULES PRÉREQUIS
#!----------------------------------------------------------------------------------------
#*============================== Modules Personnels ==============================
from tools import utils, gmail
#*============================== Modules Communs ==============================
import os
import json
from pathlib import Path



#!----------------------------------------------------------------------------------------
#!                                         CLASS
#!----------------------------------------------------------------------------------------
class Aster1(object):
    ''' aster1 server
        *ATTRIBUTES*
            nodes:
        *METHODS*
            get():
    '''
    def __init__(self, turbulenceModel, allSeedsFile, windPath, outputPath, echo):
        self.allSeeds = self._getAllSeeds(turbulenceModel, allSeedsFile)
        self.windPath = windPath
        self.outputPath = outputPath
        self.echo = echo
        # internal attributes
        self.list_filebase = []
        self.seeds = []

    def initiate(self):
        self._getFilelist()
        self._convertToSeed(self.list_filebase)

    def run(self, function, *args):
        if len(args) == 0: function(self.seeds)
        if len(args) == 1: function(self.seeds, args[0])
        if len(args) == 2: function(self.seeds, args[0], args[1])
        if len(args) == 3: function(self.seeds, args[0], args[1], args[2])
        if len(args) == 4: function(self.seeds, args[0], args[1], args[2], args[3])

    def resume(self, programName, inputFileSize=None, outputFileSize=None):
        self.seeds = []
        if programName.lower() == 'FAST'.lower():
            # find out files that have been finished in output folder
            outputList = self._find(self.outputPath, '*.out', outputFileSize)
            # find out files that are existed in input folder
            inputList = self._find(self.windPath, '*.bts', inputFileSize)
            # find out the files that need to be recomputed
            recompute = list(set(inputList).difference(outputList))
            self._convertToSeed(recompute)
            print('|- {} tasks will be recomputed by FAST'.format(len(recompute)))
        elif programName.lower() == 'Stress'.lower():
            outputList = self._find(self.outputPath, '*.str', outputFileSize)
            inputList = self._find(self.outputPath, '*.out', inputFileSize)
            recompute = list(set(inputList).difference(outputList))
            self._convertToSeed(recompute)
            print('|- {} tasks will be recomputed by Stress'.format(len(recompute)))
        elif programName.lower() == 'Fatigue'.lower():
            outputList = self._find(self.outputPath, '*.dam', outputFileSize)
            inputList = self._find(self.outputPath, '*.out', inputFileSize)
            recompute = list(set(inputList).difference(outputList))
            self._convertToSeed(recompute)
            print('|- {} tasks will be recomputed by Fatigue (including Stress)'.format(len(recompute)))
        elif programName.lower() == 'TurbSim'.lower():
            # find out wind profiles that have been received
            outputList = self._find(self.windPath, '**/*.bts', outputFileSize)
            # find out wind profiles that are planned to be generated
            inputList = ['{}_{}mps_{}'.format(s[0], s[1], s[2]) for s in self.allSeeds]
            recompute = list(set(inputList).difference(outputList))
            self._convertToSeed(recompute)
            # write to file
            encode = json.dumps(self.seeds, indent=4)
            p = Path(self.windPath).parent.expanduser().joinpath('recomputedSeeds.json')
            p.open('w').write(encode)
            # # send file to local machines
            # command = 'scp {} hbai@{}:{}'.format()
            print('|- {} tasks need be recomputed by TurbSim'.format(len(recompute)))

    def _getAllSeeds(self, turbulenceModel, allSeedsFile):
        file = Path(allSeedsFile).expanduser()
        with open(file, 'r') as f:
            seeds = json.loads(f.read())
            result = [s for s in seeds if s[0] == turbulenceModel]
        return result

    def _getFilelist(self):
        self.list_filebase = self._find(self.windPath, '*.bts')
        if self.list_filebase == []:
            gmail.send_mail('hao.bai@insa-rouen.fr')

    def _convertToSeed(self, list_filebase):
        for filebase in list_filebase:
            seed = filebase.split('_')
            if len(seed) < 3: continue
            seed[1] = seed[1].rstrip('mps')
            self.seeds.append(seed)

    def _find(self, path, pattern, size):
        ''' size: minimum size in bytes (1 GB = 1024 MB = 1024^2 KB = 1024^3 Bytes) [num]
        '''
        with utils.cd(path):
            p = Path().expanduser()
            matched = sorted(p.glob(pattern))
            if size is None:
                result = [x.stem for x in matched]
            else:
                result = [x.stem for x in matched if x.stat().st_size >= size]
        return result



#!----------------------------------------------------------------------------------------
#!                                      FUNCTIONS
#!----------------------------------------------------------------------------------------
def testFunction():
    pass



#!----------------------------------------------------------------------------------------
#!                                     MAIN FUNCTION
#!----------------------------------------------------------------------------------------
def main():
    test = Aster1('NTM',
                  '~/Eolien/Parameters/NREL_5MW_Onshore/Wind/1000seeds.json',
                  '~/Eolien/Parameters/NREL_5MW_Onshore/Wind/DLC1.1',
                  '~/Eolien/Parameters/NREL_5MW_Onshore/Output/DLC1.1',
                  True)
    test.resume('TurbSim', outputFileSize=70*1024**2)
    # test.resume('FAST', inputFileSize=70*1024**2, outputFileSize=90*1024**2)
    # test.resume('Stress', inputFileSize=90*1024**2, outputFileSize=204*1024**2)
    # test.resume('Fatigue', inputFileSize=204*1024**2, outputFileSize=20*1024)



#!----------------------------------------------------------------------------------------
#!                                         EXÉCUTION
#!----------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
