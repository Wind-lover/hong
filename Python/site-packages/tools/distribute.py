#!/usr/bin/env python
# -*- coding: utf-8 -*-

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Distribute computing tasks
#
#
# Authors: Hao BAI
# Date: 01/11/2018
#
# Version:
#   - 0.0: Initial version
#   
# Comments:
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!----------------------------------------------------------------------------------------
#!                                          MODULES PRÉREQUIS
#!----------------------------------------------------------------------------------------
#*============================== Modules Personnels ==============================

#*============================== Modules Communs ==============================
import platform


#!----------------------------------------------------------------------------------------
#!                                         CLASS
#!----------------------------------------------------------------------------------------
class LMN(object):
    ''' Computers in Laboratoire de Mécanique de Normandie
        Attributes:
            nodes: available computer names [list]
        Methods:
            get(): get values by channel name or channel number
    '''
    def __init__(self, function):
        self.function = function
        self._nodes = {'PC-LMR-O7010B':[], # Hao BAI
                       'PC-LMN-7050':[], # Chao REN
                       'PC-LMN-7040':[],
                       'PC-LMN-9010':[], # Changwu HUANG
                       'PC-LMN-1600A':[], # Surke ALJAMEL
                       'PC-LMN-1600B':[], # Corentin LOTHODE
                       'PC-LMN-9020':[], # Shubiao WANG
                     }
        self._currentComputer = platform.node()
        self._length = None

    def setIndividually(self, computerName, values):
        self._nodes[computerName] = values

    def setEqually(self, values):
        self._length = int(len(values)/len(self._nodes))
        chunks = [values[i:i+self._length] for i in range(0, len(values), self._length)]
        i = 0
        for key in self._nodes.keys():
            self.setIndividually(key, chunks[i])
            i = i + 1

    def show(self):
        for (key, value) in self._nodes.items():
            print('{} refers a {} of length {}\n{}\n'.format(key, type(value), len(value),
                  value))

    def run(self):
        print('Distributed Computing v0.0 (November 1 2018)')
        print('You are running on computer {}'.format(self._currentComputer))
        print('The function {} will be called {} times'.format(self.function,
              self._length))
        print('========== Computing Starts ==========')
        inputParameter = self._nodes.get(self._currentComputer)
        if inputParameter is None:
            raise Exception("|- [ERROR] The computer {} is an unknown device".format(
                            self._currentComputer))
        else:
            self.function(inputParameter)




#!----------------------------------------------------------------------------------------
#!                                      FUNCTIONS
#!----------------------------------------------------------------------------------------
def testFunction():
    pass


#!----------------------------------------------------------------------------------------
#!                                     MAIN FUNCTION
#!----------------------------------------------------------------------------------------
def main():
    test = LMN(testFunction)
    test.show()


#!----------------------------------------------------------------------------------------
#!                                         EXÉCUTION
#!----------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
