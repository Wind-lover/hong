#!/usr/bin/env python
# -*- coding: utf-8 -*-

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Distribute computing tasks
#
#
# Authors: Hao BAI
# Date: 01/11/2018
#
# Version:
#   - 0.0: Initial version
#   - 0.1: Valid version
# Comments:
# 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!----------------------------------------------------------------------------------------
#!                                          MODULES PRÉREQUIS
#!----------------------------------------------------------------------------------------
#*============================== Modules Personnels ==============================

#*============================== Modules Communs ==============================
import platform


#!----------------------------------------------------------------------------------------
#!                                         CLASS
#!----------------------------------------------------------------------------------------
class LMN(object):
    ''' Computers in Laboratoire de Mécanique de Normandie
        Attributes:
            nodes: available computer names [list]
        Methods:
            get(): get values by channel name or channel number
    '''
    def __init__(self, function):
        self.function = function
        self._nodes = {'PC-LMR-O7010B':[1], # Hao BAI
                       'PC-LMN-7050':[2], # Chao REN
                       'PC-LMN-7040':[3],
                       'PC-LMN-9010':[4], # Changwu HUANG
                       'PC-LMN-1600A':[5], # Surke ALJAMEL
                       'PC-LMN-1600B':[6], # Corentin LOTHODE
                       'PC-LMN-9020':[7], # Shubiao WANG
                     }
        self._currentComputer = platform.node()
        self._length = None

    def setIndividually(self, computerName, values):
        self._nodes[computerName] = values
        # print('{} is affected to {}'.format(computerName, values))

    def setEqually(self, values):
        self._length = int(len(values)/len(self._nodes))
        chunks = [values[i:i+self._length] for i in range(0, len(values), self._length)]
        i = 0
        for (key, value) in sorted(self._nodes.items(), key=lambda x:x[1]):
            self.setIndividually(key, chunks[i])
            i = i + 1

    def show(self):
        for (key, value) in self._nodes.items():
            print('{} refers a {} of length {}\n'.format(key, type(value), len(value)))

    def run(self):
        inputParameter = self._nodes.get(self._currentComputer)
        print('Distributed Computing v0.1 (November 1 2018)')
        print('You are running on computer {}'.format(self._currentComputer))
        print('The function {} will be called {} times'.format(self.function,
              self._length, inputParameter))
        print('========== Computing Starts ==========')
        if inputParameter is None:
            raise Exception("|- [ERROR] The computer {} is an unknown device".format(
                            self._currentComputer))
        else:
            self.function(inputParameter)



#!----------------------------------------------------------------------------------------
#!                                      FUNCTIONS
#!----------------------------------------------------------------------------------------
def testFunction():
    pass



#!----------------------------------------------------------------------------------------
#!                                     MAIN FUNCTION
#!----------------------------------------------------------------------------------------
def main():
    test = LMN(testFunction)
    test.show()



#!----------------------------------------------------------------------------------------
#!                                         EXÉCUTION
#!----------------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
